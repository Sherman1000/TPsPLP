PackageManifest subclass: #ManifestPLPTP	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!ManifestPLPTP commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestPLPTP class	instanceVariableNames: ''!!ManifestPLPTP class methodsFor: 'code-critics' stamp: 'Sherman 6/17/2016 20:54'!ruleRBNoClassCommentRuleV1FalsePositive	^ #(#(#(#RGClassDefinition #(#PropositionalVariable)) #'2016-06-11T16:50:57.10482-03:00') #(#(#RGClassDefinition #(#BinaryPropositionalFormula)) #'2016-06-17T20:54:06.652682-03:00') )! !Object subclass: #NegatedNormalFormTransformer	instanceVariableNames: 'formula'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!NegatedNormalFormTransformer commentStamp: '<historical>' prior: 0!Encargado de realizar la transformación de la formula a NNF!!NegatedNormalFormTransformer methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 17:35'!do	| formulaWithoutImplications |	formulaWithoutImplications := formula withoutImplications.	^ formulaWithoutImplications organizeNegations.! !!NegatedNormalFormTransformer methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 17:01'!initWith: aFormula	formula := aFormula.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NegatedNormalFormTransformer class	instanceVariableNames: ''!!NegatedNormalFormTransformer class methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 17:01'!newWith: aFormula	^ self new initWith: aFormula! !Object subclass: #PropositionalFormula	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!PropositionalFormula commentStamp: '<historical>' prior: 0!Formulas Proposicionales!!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 20:53'!negate	^ SubclassResponsibility ! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 17:38'!organizeNegations	^ SubclassResponsibility ! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 17:12'!withoutImplications	^ SubclassResponsibility ! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/11/2016 20:31'!==> aFormula	^ Implication of: self and: aFormula! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/14/2016 21:02'!allPropVars	^ SubclassResponsibility ! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 19:20'!printString	^ self asString! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 19:48'!= aFormula 	^ SubclassResponsibility ! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/11/2016 20:30'!& aFormula	^ Conjunction of: self and: aFormula ! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 18:49'!asString	^ SubclassResponsibility ! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 18:59'!operatorAsString	^ SubclassResponsibility ! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 17:25'!toNNF	^ (NegatedNormalFormTransformer newWith: self) do! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 19:48'!hash 	^ SubclassResponsibility ! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/11/2016 20:30'!| aFormula	^ Disjunction of: self and: aFormula ! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/11/2016 20:29'!not 	^ Negation of: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PropositionalFormula class	instanceVariableNames: ''!!PropositionalFormula class methodsFor: 'as yet unclassified' stamp: 'Sherman 6/14/2016 20:53'!of: aFormula and: anotherFormula	^ SubclassResponsibility. ! !!PropositionalFormula class methodsFor: 'as yet unclassified' stamp: 'Sherman 6/14/2016 20:53'!of: aFormula	^ SubclassResponsibility ! !PropositionalFormula subclass: #BinaryPropositionalFormula	instanceVariableNames: 'firstFormula secondFormula operator'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!BinaryPropositionalFormula commentStamp: '<historical>' prior: 0!Formulas Binarias!!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 20:58'!negate	^ SubclassResponsibility ! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 17:30'!organizeNegations	|firstResult secondResult msg |	firstResult := firstFormula organizeNegations.	secondResult := secondFormula organizeNegations.	msg := Message selector: operator argument: secondResult.	^ msg sendTo: firstResult.! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 17:37'!withoutImplications	|firstResult secondResult msg |	firstResult := firstFormula withoutImplications. 	secondResult := secondFormula withoutImplications.	msg := Message selector: operator argument: secondResult.	^ msg sendTo: firstResult.! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/14/2016 21:03'!allPropVars	^ firstFormula allPropVars union: secondFormula allPropVars. ! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 11:59'!= aFormula	"Had to implement this short-circuit evaluation. If not, should have implemented my own Boolean"	"If didn't do this, UnaryPropositionalFormula and PropositionalVariables would have fail to understand secondFormula message"	"It's not their responsibility to even know that secondFormula message exists"	(self class == aFormula class) ifFalse: [ ^ false ].	^ (firstFormula = (aFormula firstFormula)) and: (secondFormula = (aFormula secondFormula))! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 19:49'!firstFormula	^ firstFormula. ! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/14/2016 20:59'!initWith: aFormula and: anotherFormula	firstFormula := aFormula. 	secondFormula := anotherFormula.! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 19:19'!asString	| firstFormulaAsString secondFormulaAsString |	(((firstFormula isKindOf: PropositionalFormula) & (firstFormula isKindOf: Negation) not)) 																ifTrue: [ firstFormulaAsString := '( ', firstFormula asString, ' )']																ifFalse: [ firstFormulaAsString := firstFormula asString].	(((secondFormula isKindOf: PropositionalFormula) & (secondFormula isKindOf: Negation) not)) 																ifTrue: [ secondFormulaAsString := '( ', secondFormula asString, ' )']																ifFalse: [ secondFormulaAsString := secondFormula asString].	^ firstFormulaAsString, self operatorAsString, secondFormulaAsString ! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 18:47'!value: aValuation	|firstResult secondResult msg |	firstResult := firstFormula value: aValuation.	secondResult := secondFormula value: aValuation.	msg := Message selector: operator argument: secondResult.	^ msg sendTo: firstResult.! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 19:49'!secondFormula	^ secondFormula. ! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 19:46'!hash 	^ self class hash + firstFormula hash + secondFormula hash! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 18:26'!setOperator: aOperator	operator := aOperator! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BinaryPropositionalFormula class	instanceVariableNames: ''!!BinaryPropositionalFormula class methodsFor: 'as yet unclassified' stamp: 'Sherman 6/14/2016 20:52'!of: aFormula and: anotherFormula	^ self new initWith: aFormula and: anotherFormula ! !!BinaryPropositionalFormula class methodsFor: 'as yet unclassified' stamp: 'Sherman 6/14/2016 20:55'!of: aFormula	^ ShouldNotImplement  ! !BinaryPropositionalFormula subclass: #Conjunction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!Conjunction commentStamp: '<historical>' prior: 0!Conjuncion!!Conjunction methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 18:52'!operatorAsString	^ ' & '! !!Conjunction methodsFor: 'as yet unclassified' stamp: 'Sherman 6/19/2016 14:27'!negate	^ firstFormula negate | (secondFormula negate). ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Conjunction class	instanceVariableNames: ''!!Conjunction class methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 18:26'!of: aFormula and: anotherFormula	| formula |	formula := super of: aFormula and: anotherFormula.	^ formula setOperator: #&.	! !BinaryPropositionalFormula subclass: #Disjunction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!Disjunction commentStamp: '<historical>' prior: 0!Disyuncion!!Disjunction methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 18:52'!operatorAsString	^ ' | '! !!Disjunction methodsFor: 'as yet unclassified' stamp: 'Sherman 6/19/2016 14:26'!negate	^ firstFormula negate & (secondFormula negate).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Disjunction class	instanceVariableNames: ''!!Disjunction class methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 18:26'!of: aFormula and: anotherFormula	| formula |	formula := super of: aFormula and: anotherFormula.	^ formula setOperator: #|.! !BinaryPropositionalFormula subclass: #Implication	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!Implication commentStamp: '<historical>' prior: 0!Implicacion!!Implication methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 18:52'!operatorAsString	^ ' ==> '! !!Implication methodsFor: 'as yet unclassified' stamp: 'Sherman 6/19/2016 14:26'!negate	^ firstFormula & (secondFormula negate).! !!Implication methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 17:33'!organizeNegations	^ ShouldNotImplement ! !!Implication methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 17:14'!withoutImplications	^ (firstFormula not | secondFormula) withoutImplications ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Implication class	instanceVariableNames: ''!!Implication class methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 18:26'!of: aFormula and: anotherFormula	| formula |	formula := super of: aFormula and: anotherFormula.	^ formula setOperator: #==>.! !Object subclass: #PropositionalVariable	instanceVariableNames: 'name'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!PropositionalVariable commentStamp: '<historical>' prior: 0!Variables Proposicionales!!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'Sherman 6/19/2016 14:18'!negate	^ self not. ! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 17:34'!organizeNegations	^ self! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 17:22'!withoutImplications 	^ self! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'Sherman 6/11/2016 20:27'!==> aFormula	^ Implication of: self and: aFormula! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'Sherman 6/13/2016 21:27'!allPropVars	^ Set with: name  ! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 19:21'!printString	^ self asString ! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 20:33'!= aFormula	^ (self class == aFormula class) and: (name = (aFormula name))! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'Sherman 6/11/2016 20:24'!& aFormula	^ Conjunction of: self and: aFormula! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'Sherman 6/11/2016 20:43'!asString	^ name! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'Sherman 6/11/2016 19:32'!value: aValuation	^ aValuation includes: name.! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'Sherman 6/11/2016 20:25'!| aFormula	^ Disjunction of: self and: aFormula! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'Sherman 6/11/2016 20:23'!not 	^ Negation of: self! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'Sherman 6/11/2016 18:54'!initWith: aName	name := aName.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PropositionalVariable class	instanceVariableNames: ''!!PropositionalVariable class methodsFor: 'as yet unclassified' stamp: 'Sherman 6/11/2016 18:54'!named: aName	^ self new initWith: aName.! !PropositionalFormula subclass: #UnaryPropositionalFormula	instanceVariableNames: 'firstFormula'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!UnaryPropositionalFormula commentStamp: '<historical>' prior: 0!Formulas Unarias!!UnaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 18:54'!value: aValuation	^ SubclassResponsibility ! !!UnaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 19:47'!hash 	^ self class hash + firstFormula hash! !!UnaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 19:50'!firstFormula	^ firstFormula. ! !!UnaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/14/2016 20:58'!initWith: aFormula	firstFormula := aFormula.! !!UnaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 16:27'!= aFormula	"Had to implement this short-circuit evaluation. If not, should have implemented my own Boolean"	"If didn't do this, UnaryPropositionalFormula and PropositionalVariables would have fail to understand secondFormula message"	"It's not their responsibility to even know that secondFormula message exists"	(self class == aFormula class) ifFalse: [ ^ false ].	^ (firstFormula = (aFormula firstFormula))	"^ (self class == aFormula class) and: (firstFormula = (aFormula firstFormula))"! !!UnaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 19:07'!asString	| formulaAsString |	(firstFormula isKindOf: PropositionalFormula) ifTrue: [ formulaAsString := '( ', firstFormula asString, ' )']																ifFalse: [ formulaAsString := firstFormula asString].	^ self operatorAsString, formulaAsString ! !!UnaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 20:59'!negate	^ SubclassResponsibility ! !!UnaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 18:53'!allPropVars	^ firstFormula allPropVars.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UnaryPropositionalFormula class	instanceVariableNames: ''!!UnaryPropositionalFormula class methodsFor: 'as yet unclassified' stamp: 'Sherman 6/14/2016 20:55'!of: aFormula and: anotherFormula	^ ShouldNotImplement ! !!UnaryPropositionalFormula class methodsFor: 'as yet unclassified' stamp: 'Sherman 6/14/2016 20:51'!of: aFormula	^ self new initWith: aFormula! !UnaryPropositionalFormula subclass: #Negation	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!Negation commentStamp: '<historical>' prior: 0!Negacion!!Negation methodsFor: 'as yet unclassified' stamp: 'Sherman 6/14/2016 21:16'!value: aValuation	^ (firstFormula value: aValuation) not! !!Negation methodsFor: 'as yet unclassified' stamp: 'Sherman 6/17/2016 18:53'!operatorAsString	^ '¬'! !!Negation methodsFor: 'as yet unclassified' stamp: 'Sherman 6/19/2016 11:30'!negate	^ firstFormula. ! !!Negation methodsFor: 'as yet unclassified' stamp: 'Sherman 6/19/2016 14:11'!organizeNegations	(firstFormula isMemberOf: Negation) ifTrue: [ ^ firstFormula negate organizeNegations ].	(firstFormula isMemberOf: Disjunction) ifTrue: [ ^ firstFormula negate organizeNegations ].	(firstFormula isMemberOf: Conjunction) ifTrue: [ ^ firstFormula negate organizeNegations ].	^ self.! !!Negation methodsFor: 'as yet unclassified' stamp: 'Sherman 6/18/2016 17:19'!withoutImplications 	^ firstFormula withoutImplications not! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Negation class	instanceVariableNames: ''!!Negation class methodsFor: 'as yet unclassified' stamp: 'Sherman 6/13/2016 21:08'!of: aFormula and: anotherFormula	^ MessageNotUnderstood.! !